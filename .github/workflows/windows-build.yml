name: Windows Build (Meson GTK4 Libadwaita)

on:
  push:
    branches: [master]
  pull_request:

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - uses: actions/checkout@v4

      - name: Cache MSYS2 packages
        uses: actions/cache@v3
        with:
          path: D:/a/_temp/msys64/ucrt64
          key: msys2-${{ runner.os }}-ucrt64-${{ hashFiles('msys2-requirements.txt') }}

      - name: Cache Python venv & pip
        uses: actions/cache@v3
        with:
          path: |
            venv
            ~/.cache/pip
          key: pip-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}

      - name: Read MSYS2 requirements
        id: msys2-list
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const lines = fs
              .readFileSync('msys2-requirements.txt', 'utf8')
              .split(/\r?\n/)
              .filter(line => line.trim().length > 0);
            core.setOutput('packages', lines.join('\n'));

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          install: ${{ steps.msys2-list.outputs.packages }}

      - name: Debug GEOS DLL location
        shell: msys2 {0}
        run: |
          echo "Checking for GEOS C DLL in /ucrt64/bin:"
          find /ucrt64/bin -iname '*geos*_*.dll' -exec ls -lh {} \;

          echo
          echo "Looking inside Python's site-packages for Shapely:"
          python -c "import shapely, os; print('Shapely installed at:', os.path.dirname(shapely.__file__))"

          echo
          echo "Listing any DLLs already bundled with Shapely:"
          PY_SITE=$(python -c "import shapely, os; print(os.path.dirname(shapely.__file__))")
          find $PY_SITE -type f -iname '*.dll' -o -iname '*.so'

          echo
          echo "Checking .libs folder (if exists):"
          find $PY_SITE/.libs 2>/dev/null || echo ".libs folder not found"

      - name: Create and activate venv
        shell: msys2 {0}
        run: |
          python -m venv venv
          cp -r /ucrt64/lib/python3.12/site-packages/* venv/lib/python3.12/site-packages/
          source venv/bin/activate
          
      - name: Install pip packages with GDAL environment
        shell: msys2 {0}
        run: |
          source venv/bin/activate
          export GDAL_VERSION=$(gdal-config --version)
          export GDAL_INCLUDE_PATH=$(gdal-config --cflags | sed -n 's/.*-I\([^ ]*\).*/\1/p')
          export GDAL_LIBRARY_PATH=$(gdal-config --libs | sed -n 's/.*-L\([^ ]*\).*/\1/p')
          echo "Using GDAL_VERSION=$GDAL_VERSION"
          echo "Using GDAL_INCLUDE_PATH=$GDAL_INCLUDE_PATH"
          echo "Using GDAL_LIBRARY_PATH=$GDAL_LIBRARY_PATH"
          pip install -r requirements.txt
          find D:/a/_temp/msys64/ucrt64 -name "*.typelib"

      - name: Configure and build with Meson
        shell: msys2 {0}
        run: |
          source venv/bin/activate
          meson setup builddir --prefix="$PWD/build-install"
          meson compile -C builddir
          meson install -C builddir

      - name: Install PyInstaller and build EXE
        shell: msys2 {0}
        run: |
          source venv/bin/activate
          export PATH="/ucrt64/bin:$PATH"
          pip install pyinstaller
          pyinstaller stratum.spec

      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: drucken3d-windows
          path: dist/drucken3d

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-app-windows
          path: my-app-windows.zip
